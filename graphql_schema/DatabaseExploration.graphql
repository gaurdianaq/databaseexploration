type Query {
    getAllWeapons: [Weapon!]
    getAllArmour: [Armour!]
    getAllHeroes: [Hero!]
    getAllBlackSmiths: [BlackSmith!]
    getAllMerchants: [Merchant!]
    getAllItemsForCharacter(character: Character!): [Item!]
}

interface Item {
    name: String!
    weight: Float!
    owned_by: Character
    posessed_by: Character
    value: Int!
    trade_history: [Trade!]!
}

interface RepairableItem implements Item {
    name: String!
    weight: Float!
    durability: Int!
    owned_by: Character
    posessed_by: Character
    value: Int!
    trade_history: [Trade!]!
    repair_history: [Repair!]!
}

type Repair {
    cost: Int!
    blacksmith: BlackSmith!
}

#Int is used to represent a monetary value, might eventually implement a Money type
union Tradeable = Int | Item

type Trade {
    cost: Tradeable!
    buyer: Character!
    seller: Character!
}

interface Character {
    name: String!
    race: Race!
    inventory: [Item!]
    money: Int!
    isAlive: Boolean!
    faction: Faction!
    current_location: Location!
    home: Home!
    level: Int!
    strength: Int!
    dexterity: Int!
    intelligence: Int!
    faith: Int!
    vitality: Int!
    endurance: Int!
}

type Hero implements Character {
    name: String!
    race: Race!
    inventory: [Item!]
    money: Int!
    isAlive: Boolean!
    faction: Faction!
    current_location: Location!
    home: Home!
    level: Int!
    strength: Int!
    dexterity: Int!
    intelligence: Int!
    faith: Int!
    vitality: Int!
    endurance: Int!
}

type BlackSmith implements Character {
    name: String!
    race: Race!
    inventory: [Item!]
    money: Int!
    isAlive: Boolean!
    faction: Faction!
    current_location: Location!
    home: Home!
    forge: Forge!
    level: Int!
    strength: Int!
    dexterity: Int!
    intelligence: Int!
    faith: Int!
    vitality: Int!
    endurance: Int!
}

type Merchant implements Character {
    name: String!
    race: Race!
    inventory: [Item!]
    money: Int!
    isAlive: Boolean!
    faction: Faction!
    current_location: Location!
    home: Home!
    store: Store!
    level: Int!
    strength: Int!
    dexterity: Int!
    intelligence: Int!
    faith: Int!
    vitality: Int!
    endurance: Int!
}

interface Property {
    location: Location!
    inventory: [Item!]!
    owners: [Character!]
    occupants: [Character!]
}

type Home implements Property {
    location: Location!
    inventory: [Item!]!
    owners: [Character!]
    occupants: [Character!]
}

type Forge implements Property {
    location: Location!
    inventory: [Item!]!
    owners: [Character]!
    occupants: [Character!]
}

type Store implements Property {
    location: Location!
    inventory: [Item!]!
    owners: [Character]!
    occupants: [Character!]
}

type Coordinates {
    x: Float!
    y: Float!
}

interface Location {
    name: String!
    coordinates: Coordinates!
    people: [Character!]
}

type Town implements Location {
    name: String!
    coordinates: Coordinates!
    people: [Character!]!
    population: Int
    controllingFaction: Faction!
    residents: [Character!]!
}

type Cave implements Location {
    name: String!
    coordinates: Coordinates!
    people: [Character!]
}

type Forest implements Location {
    name: String!
    coordinates: Coordinates!
    people: [Character!]
}

enum Race {
    Human,
    Elf,
    DarkElf,
    Dwarf,
    Orc,
    Skeleton,
    Vampire,
    Dragonian
}

enum Faction {
    Light,
    Dark,
    Chaos,
    Balance
}

type Weapon implements RepairableItem, Item {
    name: String!
    weight: Float!
    durability: Int!
    owned_by: Character
    posessed_by: Character
    type: WeaponType!
    stats: WeaponStats!
    requirements: WeaponRequirements!
    value: Int!
    trade_history: [Trade!]!
    repair_history: [Repair!]!
}

enum WeaponType {
    StraightSword,
    CurvedSword,
    CurvedGreatSword,
    Hammer,
    GreatHammer,
    GreatSword,
    UltraGreatSword,
    Bow,
    Crossbow,
    GreatBow,
    Shield,
    GreatShield,
    Dagger,
    Staff,
    Talisman,
    Axe,
    GreatAxe,
    Spear,
    Halberd
    Whip,
    Katana
}

type WeaponStats {
    slash_dmg: Int!
    piercing_dmg: Int!
    blunt_dmg: Int!
    fire_dmg: Int!
    dark_dmg: Int!
    divine_dmg: Int!
    lightning_dmg: Int!
    magic_dmg: Int!
}

type WeaponRequirements {
    strength: Int!
    dexterity: Int!
    intelligence: Int!
    faith: Int!
}

type Armour implements RepairableItem, Item {
    name: String!
    weight: Float!
    durability: Int!
    owned_by: Character
    posessed_by: Character
    class: ArmourClassification
    type: ArmourType
    stats: ArmourStats
    value: Int!
    trade_history: [Trade!]!
    repair_history: [Repair!]!
}

type ArmourStats {
    slash_res: Int!
    piercing_res: Int!
    blunt_res: Int!
    fire_res: Int!
    dark_res: Int!
    divine_res: Int!
    lightning_res: Int!
    magic_res: Int!
    bleed_res: Int!
    poison_res: Int!
    curse_res: Int!
}

enum ArmourClassification {
    Light,
    Medium,
    Heavy
}

enum ArmourType {
    Helmet,
    Breastplate,
    Gauntlets,
    Greaves,
    Boots
}